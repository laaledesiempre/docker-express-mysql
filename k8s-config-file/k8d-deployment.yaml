# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment 
  namespace: default
  labels:
    app: nginx  
spec:
  selector:
    matchLabels:
      app: nginx 
  replicas: 1
  template:
    metadata:
      labels:
        app: nginx  
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name: nginx 
        image: laaledesiempre/docker-express-mysql:nginx
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 200m
            memory: 200Mi
          limits:
            cpu: 200m
            memory: 200Mi
        ports:
        - containerPort:  3000
---
# https://kubernetes.io/docs/concepts/services-networking/service/
apiVersion: v1
kind: Service
metadata:
  name: nginx-service 
  namespace: default
spec:
  selector:
    app: nginx 
  type: LoadBalancer
  ports:
  - name: 
    protocol: TCP
    port: 3000
    targetPort: 3000
    nodePort: 30000
---
# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-deployment 
  namespace: default
  labels:
    app: react
spec:
  selector:
    matchLabels:
      app: react
  replicas: 1
  template:
    metadata:
      labels:
        app: react
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name: react  
        image: laaledesiempre/docker-express-mysql:react
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 200m
            memory: 500Mi
          limits:
            cpu: 200m
            memory: 500Mi
        ports:
        - containerPort: 5173
---
# https://kubernetes.io/docs/concepts/services-networking/service/
apiVersion: v1
kind: Service
metadata:
  name: react 
  namespace: default
spec:
  selector:
    app: react 
  type: LoadBalancer
  ports:
  - name: 
    protocol: TCP
    port: 5173 
    targetPort: 5173 
---

